.\" geocalc.1.man
.\" File ID: f97aa59c-92bb-11ef-95a5-83850402c3ce
.TH GEOCALC 1 "RPL_DATE" "geocalc\-RPL_VERSION"
.SH NAME
geocalc \- Calculate various geographic data
.SH SYNOPSIS
.B geocalc
[\fIOPTIONS\fP] <\fICOMMAND\fP> [\fIARGS\fP]
.SH DESCRIPTION
Geocalc is a program that calculates various geographic data. It receives 
parameters and values via the command line, and prints accurate and strict 
values to standard output. This makes it suitable for use in scripts and quick 
manual calculations.
.SS Features
.IP \[bu] 2
Distance calculations between coordinates
.IP \[bu] 2
Bearing calculations
.IP \[bu] 2
Plot shortest route between points
.IP \[bu] 2
Generate random positions on Earth with optional distance restraints
.IP \[bu] 2
Calculate antipodal positions
.IP \[bu] 2
Output in various formats
.IP \[bu] 2
Minimal dependencies, no extra C libraries needed
.IP \[bu] 2
Platform independent
.IP \[bu] 2
Built-in test suite for all functionality
.SH OPTIONS
.TP
\fB\-\-count\fP \fINUM\fP
When used with \fBrandpos\fP, print \fINUM\fP random points.
.TP
\fB\-F\fP \fIFORMAT\fP, \fB\-\-format\fP \fIFORMAT\fP
Create output of type \fIFORMAT\fP. Available formats: \fBdefault\fP,\& 
\fBgpx\fP, \fBsql\fP.
.TP
\fB\-H\fP, \fB\-\-haversine\fP
Use the Haversine formula (spherical Earth model) for the \fBdist\fP or 
\fBbear\fP command. This formula is the default due to its compatibility with 
other Geocalc commands, other software, and most GPS units. It is accurate 
enough for most practical uses, but for applications requiring sub-millimeter 
accuracy, use the \fB\-K\fP/\fB\-\-karney\fP option.
.TP
\fB\-h\fP, \fB\-\-help\fP
Show a help summary.
.TP
\fB\-K\fP, \fB\-\-karney\fP
Use the Karney formula for the \fBdist\fP or \fBbear\fP command. This formula 
models the Earth as an ellipsoid and provides significantly higher accuracy 
than the default Haversine formula, which assumes a spherical Earth. It 
achieves an accuracy of 15 nanometers for distance calculations, making it 
suitable for high-precision applications.
.TP
\fB\-\-km\fP
Use kilometers instead of meters for input and output. An exception is the 
\fBsql\fP format, where it will use kilometers for command line arguments, but 
the distances will always be stored as meters in the generated SQL.
.TP
\fB\-\-license\fP
Print the software license.
.TP
\fB\-q\fP, \fB\-\-quiet\fP
Be more quiet. Can be repeated to increase silence.
.TP
\fB\-\-seed\fP \fISEEDNUM\fP
Initialize the pseudo-random number generator with the value \fISEEDNUM\fP. 
This allows reproducible sequences when using \fBrandpos\fP, where identical 
seed values will generate identical coordinate sequences.
.TP
\fB\-\-selftest\fP [\fIARG\fP]
Run the built-in test suite. If specified, the argument can contain one or more 
of these strings: \fBexec\fP (the tests use the executable file), \fBfunc\fP 
(runs function tests), or \fBall\fP. Multiple strings should be separated by 
commas. If no argument is specified, default is \fBall\fP.
.TP
\fB\-\-valgrind\fP [\fIARG\fP]
Run the built-in test suite with Valgrind memory checking. Accepts the same 
optional argument as \fB\-\-selftest\fP, with the same defaults.
.TP
\fB\-v\fP, \fB\-\-verbose\fP
Increase level of verbosity. Can be repeated.
.TP
\fB\-\-version\fP
Print version information.
.SH COMMANDS
All coordinates must be entered as decimal degrees, using the format 
\fB[\-]xxx.yyyyy\fP. Only metric units are supported; distances are printed in 
meters or kilometers, and distance inputs are also expected to be in meters or 
kilometers.
.PP
Some arguments are specified as a coordinate. One format is allowed: 
\fBlat,lon\fP where \fIlat\fP and \fIlon\fP is a number in the range \-90..90 
and \-180..180, separated by a comma. The decimal comma must be a period, '.'.
.TP
\fBanti\fP <\fIcoor\fP>
Prints the antipodal coordinate of \fIcoor\fP, i.e. the coordinate on the exact 
opposite side of the planet. If the latitude is 90 or \-90, the longitude is 
normalized to 0.0.
.TP
\fBbear\fP <\fIcoor1\fP> <\fIcoor2\fP>
Prints initial compass bearing (0\-360) between two points. For antipodal 
points (points exactly opposite each other on the globe, including the poles), 
the initial bearing is undefined because multiple paths (all directions) are 
equally valid. This is also the case with coincident points. It's hard to tell 
which direction to go when you're already there. In such cases, the command 
fails with an error message and an exit status of 1.
.TP
\fBbench\fP [\fIseconds\fP]
Executes various benchmarks and reports the results. The optional \fIseconds\fP 
argument specifies the duration of the loops. Default value is 2 seconds.
.TP
\fBbpos\fP <\fIcoor\fP> <\fIbearing\fP> <\fIdistance\fP>
Calculates the new geographic position after moving \fIdistance\fP meters from 
the position \fIcoor\fP in direction \fIbearing\fP. Negative values for 
\fIdistance\fP are allowed, to make it possible to calculate positions in the 
opposite direction of \fIbearing\fP.
.TP
\fBcourse\fP <\fIcoor1\fP> <\fIcoor2\fP> <\fInum\fP>
Generates a list of \fInum\fP intermediate points on a direct line between two 
locations. If a value of 0 is specified, only the begin and end positions are 
printed.
.TP
\fBdist\fP <\fIcoor1\fP> <\fIcoor2\fP>
Calculates the distance between two geographic points, using the Haversine or 
Karney formula. The result (in meters or kilometers) is printed to standard 
output.
.TP
\fBlpos\fP <\fIcoor1\fP> <\fIcoor2\fP> <\fIfracdist\fP>
Prints the position of a point on a straight line between the locations, where 
\fIfracdist\fP is a fraction that specifies how far along the line the point 
is. 0 = start position, 1 = end position. \fIfracdist\fP can also take values 
below 0 or above 1 to calculate positions beyond \fIcoor2\fP or in the opposite 
direction from \fIcoor1\fP.
.TP
\fBrandpos\fP [[\fIcoor\fP \fImaxdist\fP] \fImindist\fP]
Generate random coordinates anywhere in the world. If \fIcoor\fP and 
\fImaxdist\fP are provided, locations will be within \fImaxdist\fP meters from 
\fIcoor\fP. If \fImindist\fP is also specified, it sets the minimum distance in 
meters from \fIcoor\fP. For worldwide locations with only a minimum distance,\& 
use \fImaxdist\fP = 0. If \fImaxdist\fP is not 0 and \fImindist\fP is greater 
than \fImaxdist\fP, their values will be swapped automatically. Use 
\fB\-\-count\fP to specify the number of coordinates to generate.
.SH EXIT STATUS
.TP
0
No error.
.TP
1
Some error occurred, for example invalid coordinates or numbers were provided.
.SH EXAMPLES
.TP
\fCgeocalc bear 60.393,5.324 51.53217,\-0.17786\fP
Find the bearing towards Abbey Road Studios when standing in the middle of 
Bergen, Norway.
.TP
\fCgeocalc bpos 40.80542,\-73.96546 188.7 4817.84\fP
Determine the new position when traveling 4817.84 meters from the "Seinfeld 
Caf\['e]" along a bearing of 188.7 degrees, heading slightly southwest.
.TP
\fCgeocalc \-F gpx course 52.3731,4.891 35.681,139.767 1000\fP
Create 1000 intermediate points on a straight line from Amsterdam to Tokyo in 
GPX format.
.TP
\fCgeocalc \-\-km dist 90,0 \-90,0\fP
Calculate the distance from the North Pole to the South Pole and use kilometers 
in the result.
.TP
\fCgeocalc \-F gpx lpos \-11.952039,49.245985 \-25.606629,45.167246 0.5\fP
Find center point on Madagascar, measured from the points furthest north and 
south. Print the result as a GPX waypoint.
.TP
\fCgeocalc \-\-km \-\-count 20 \-F gpx randpos 33.33131,44.39689 12\fP
Generate 20 random locations within Baghdad and output them in GPX format.
.TP
\fCgeocalc \-F sql \-\-count 1000000 randpos | sqlite3 randworld.db\fP
Generate 1 million random locations around the world and store them in an 
SQLite database.
.TP
\fC(geocalc \-F sql \-\-count 50 \-\-km randpos 55.76,37.62 20; \
echo "SELECT * FROM randpos ORDER BY dist;") | sqlite3 \-box\fP
This oneliner generates 50 random locations inside a radius of 20 km around 
Moscow and sorts by distance.
.SH AUTHOR
Written by \[/O]yvind A.\& Holm <sunny@sunbase.org>
.SH COPYRIGHT
(C)opyleft 2024\- \[/O]yvind A.\& Holm <sunny@sunbase.org>
.PP
This program is free software; you can redistribute it and/or modify it under 
the terms of the GNU General Public License as published by the Free Software 
Foundation; either version 2 of the License, or (at your option) any later 
version.
.PP
This program is distributed in the hope that it will be useful, but WITHOUT ANY 
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A 
PARTICULAR PURPOSE.
.PP
See the GNU General Public License for more details.
.PP
You should have received a copy of the GNU General Public License along with 
this program. If not, see <http://www.gnu.org/licenses/>.
